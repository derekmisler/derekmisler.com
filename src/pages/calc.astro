---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Calculator">
  <div id="keypad"></div>

  <template id="buttonTemplate">
    <button class="button" tabindex="0"></button>
  </template>
</BaseLayout>

<style>
  body {
    margin: 100px 25px;
  }

  #keypad {
    display: inline-grid;
    grid-template-columns: repeat(3, 100px);
    gap: 16px;
  }

  .button {
    display: inline-block;
    width: 100px;
    height: 80px;
    background: rgba(0, 0, 0, 0.05);
    border: none;
    border-radius: 24px;
    transition: background ease-in-out 50ms;
  }
  .button p {
    font-size: 32px;
    line-height: 32px;
    font-weight: 500;
    margin: 0;
    transform: translateY(5px);
    display: block;
  }

  .button p small {
    font-size: 14px;
    font-weight: 400;
    display: block;
  }
  .button.spring {
    background: #ffc300;
    animation-duration: 150ms;
    animation-name: spring;
  }
  .button:focus {
    background: #ffedb3;
    outline: none;
  }
  @keyframes spring {
    from {
      transform: translateY(0) scale(1);
      background: #ffc300;
    }
    25% {
      transform: translateY(10px) scale(1, 0.9);
    }
    75% {
      transform: translateY(10px) scale(1, 0.9);
    }
    to {
      transform: translateY(0) scale(1);
      background: #ffc300;
    }
  }
</style>

<script>
  const calcElt = document.querySelector('#keypad');

  // "&nbsp;" used to make sure that the numbers without letters align
  // with the ones that do
  const keys = [
    { val: 1, alt: '&nbsp;' },
    { val: 2, alt: 'ABC' },
    { val: 3, alt: 'DEF' },
    { val: 4, alt: 'GHI' },
    { val: 5, alt: 'JKL' },
    { val: 6, alt: 'MNO' },
    { val: 7, alt: 'PQRS' },
    { val: 8, alt: 'TUV' },
    { val: 9, alt: 'WXYZ' },
    { val: '*', alt: '&nbsp;' },
    { val: 0, alt: '+' },
    { val: '#', alt: '&nbsp;' },
  ];

  // Initialize the keypad
  const initCalc = () => {
    const buttonTemplate: HTMLTemplateElement | null =
      document.querySelector('#buttonTemplate');
    let row = 0;
    let col = 0;
    // Print each of the buttons
    for (var i = 0; i < keys.length; i++) {
      const button =
        buttonTemplate?.content?.firstElementChild?.cloneNode(true);
      if (!button) continue;
      const data = keys[i];
      // Add the HTML content of the button
      button.innerHTML = `<p>${data.val}<br /><small>${data.alt}</small></p>`;
      // Add data for tracking the value, row, and column position of
      // the button
      button.dataset.val = data.val;
      button.dataset.row = row;
      button.dataset.col = col;
      // Add the button to the HTML
      calcElt.appendChild(button);
      // Shift to the next column. If column 4 is reached, reset to
      // the first column
      col++;
      if (col === 3) {
        row++;
        col = 0;
      }
    }
  };

  initCalc();

  // Event handler for when a key is pressed
  const handleKeyDown = (event) => {
    const key = event.key;
    const focus = document.querySelector('.button:focus');
    if (!focus) return;
    let { row, col, val } = focus?.dataset || {};
    row = parseInt(row);
    col = parseInt(col);
    val = parseInt(val);

    switch (key) {
      case 'ArrowLeft':
        focusButton(row, col - 1);
        break;
      case 'ArrowRight':
        focusButton(row, col + 1);
        break;
      case 'ArrowUp':
        focusButton(row - 1, col);
        break;
      case 'ArrowDown':
        focusButton(row + 1, col);
        break;
      case 'Enter':
        clickButton(getButton(row, col));
        break;
      default:
        break;
    }
  };

  // Give focus to the button that is at the row and column
  // position
  const focusButton = (row: number, col: number) => {
    // Do not allow rows to loop (i.e. if you are on row 0, you
    // can't move directly to row 3)
    let r = Math.min(3, Math.max(0, row));
    let c = Math.min(2, Math.max(0, col));
    return getButton(r, c)?.focus();
  };

  // Return the HTML node for the button at the passed in
  // row and column position
  const getButton = (row: number, col: number) => {
    return document.querySelector(
      `.button[data-row="${row}"][data-col="${col}"]`,
    );
  };

  document.addEventListener('keydown', handleKeyDown);

  const clickButton = (button: Element | null) => {
    button?.classList.add('spring');
    setTimeout(() => button?.classList.remove('spring'), 150);
  };
</script>
